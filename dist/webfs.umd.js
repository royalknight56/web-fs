(function(a,h){typeof exports=="object"&&typeof module!="undefined"?h(exports):typeof define=="function"&&define.amd?define(["exports"],h):(a=typeof globalThis!="undefined"?globalThis:a||self,h(a.webFs={}))})(this,function(a){"use strict";var p=Object.defineProperty;var z=(a,h,g)=>h in a?p(a,h,{enumerable:!0,configurable:!0,writable:!0,value:g}):a[h]=g;var f=(a,h,g)=>(z(a,typeof h!="symbol"?h+"":h,g),g);function O(n,e=""){if(!n)throw new Error(e)}function R(n){return n===47}function L(n){return R(n)||n===92}function C(n){if(typeof n!="string")throw new TypeError(`Path must be a string. Received ${JSON.stringify(n)}`)}function B(n){return n>=97&&n<=122||n>=65&&n<=90}function D(n,e,r=0){let i=!1,t=n.length;for(let s=n.length-1;s>=r;--s)if(e(n.charCodeAt(s))){if(i){r=s+1;break}}else i||(i=!0,t=s+1);return n.slice(r,t)}function _(n,e){if(n.length<=1)return n;let r=n.length;for(let i=n.length-1;i>0&&e(n.charCodeAt(i));i--)r=i;return n.slice(0,r)}function F(n,e){if(e.length>=n.length)return n;const r=n.length-e.length;for(let i=e.length-1;i>=0;--i)if(n.charCodeAt(r+i)!==e.charCodeAt(i))return n;return n.slice(0,-e.length)}function H(n,e,r,i){let t="",s=0,o=-1,c=0,d;for(let l=0,u=n.length;l<=u;++l){if(l<u)d=n.charCodeAt(l);else{if(i(d))break;d=47}if(i(d)){if(!(o===l-1||c===1))if(o!==l-1&&c===2){if(t.length<2||s!==2||t.charCodeAt(t.length-1)!==46||t.charCodeAt(t.length-2)!==46){if(t.length>2){const S=t.lastIndexOf(r);S===-1?(t="",s=0):(t=t.slice(0,S),s=t.length-1-t.lastIndexOf(r)),o=l,c=0;continue}else if(t.length===2||t.length===1){t="",s=0,o=l,c=0;continue}}e&&(t.length>0?t+=`${r}..`:t="..",s=2)}else t.length>0?t+=r+n.slice(o+1,l):t=n.slice(o+1,l),s=l-o-1;o=l,c=0}else d===46&&c!==-1?++c:c=-1}return t}function j(n){if(C(n),n.length===0)return".";const e=R(n.charCodeAt(0)),r=R(n.charCodeAt(n.length-1));return n=H(n,!e,"/",R),n.length===0&&!e&&(n="."),n.length>0&&r&&(n+="/"),e?`/${n}`:n}function E(...n){if(n.length===0)return".";let e;for(let r=0,i=n.length;r<i;++r){const t=n[r];C(t),t.length>0&&(e?e+=`/${t}`:e=t)}return e?j(e):"."}function I(n,e=""){if(C(n),n.length===0)return n;if(typeof e!="string")throw new TypeError(`Suffix must be a string. Received ${JSON.stringify(e)}`);const r=D(n,R),i=_(r,R);return e?F(i,e):i}function P(n){if(n.length===0)return".";let e=-1,r=!1;for(let i=n.length-1;i>=1;--i)if(R(n.charCodeAt(i))){if(r){e=i;break}}else r=!0;return e===-1?R(n.charCodeAt(0))?"/":".":_(n.slice(0,e),R)}function x(n){C(n);let e=-1,r=0,i=-1,t=!0,s=0;for(let o=n.length-1;o>=0;--o){const c=n.charCodeAt(o);if(R(c)){if(!t){r=o+1;break}continue}i===-1&&(t=!1,i=o+1),c===46?e===-1?e=o:s!==1&&(s=1):e!==-1&&(s=-1)}return e===-1||i===-1||s===0||s===1&&e===i-1&&e===r+1?"":n.slice(e,i)}class q{constructor(e,r,i,t,s,o,c){f(this,"isFile",!0);f(this,"isDirectory",!1);f(this,"isSymlink",!1);f(this,"size",0);f(this,"mtime",new Date);f(this,"atime",new Date);f(this,"birthtime",new Date);e!==void 0&&(this.isFile=e),r!==void 0&&(this.isDirectory=r),i!==void 0&&(this.isSymlink=i),t!==void 0&&(this.size=t),s!==void 0&&(this.mtime=s),o!==void 0&&(this.atime=o),c!==void 0&&(this.birthtime=c)}}class m extends q{constructor(r,i,t,s){t.isFile&&(t.isDirectory=!1,t.isSymlink=!1),t.isDirectory&&(t.isFile=!1,t.isSymlink=!1),t.isSymlink&&(t.isFile=!1,t.isDirectory=!1);super(t.isFile,t.isDirectory,t.isSymlink,t.size,t.mtime,t.atime,t.birthtime);f(this,"path");f(this,"parentPath");f(this,"content");f(this,"id");this.path=r,this.parentPath=P(r),this.content=i,this.id=s,s===void 0&&delete this.id}}class K{constructor(){f(this,"db");f(this,"_ready",null);f(this,"_watchMap",new Map);const e=window.indexedDB.open("FileSystemDB",1);e.onerror=()=>{console.error("Failed to open database")},e.onsuccess=()=>{var r;this.db=e.result,(r=this._ready)==null||r.call(this,this)},e.onupgradeneeded=()=>{this.db=e.result;const r=this.db.createObjectStore("files",{keyPath:"id",autoIncrement:!0});r.createIndex("parentPath","parentPath"),r.createIndex("path","path",{unique:!0});let i=new m("/","",{isDirectory:!0});i.parentPath="",r.add(i)}}serializeFileSystem(){return new Promise((e,r)=>{const s=this.db.transaction("files","readonly").objectStore("files").getAll();s.onerror=()=>{r("Failed to read file")},s.onsuccess=()=>{e(s.result)}})}deserializeFileSystem(e){return new Promise((r,i)=>{const s=this.db.transaction("files","readwrite").objectStore("files"),o=s.clear();o.onerror=()=>{i("Failed to clear file")},o.onsuccess=()=>{e.forEach(c=>{s.add(c)}),r(void 0)}})}whenReady(){return this.db?Promise.resolve(this):new Promise((e,r)=>{this._ready=e})}registerWatcher(e,r){this._watchMap.set(e,r)}commitWatch(e,r){this._watchMap.forEach((i,t)=>{t.test(e)&&i(e,r)})}removeFileSystem(){window.indexedDB.deleteDatabase("FileSystemDB")}async readFile(e){const t=this.db.transaction("files","readonly").objectStore("files").index("path"),s=IDBKeyRange.only(e),o=t.get(s);return new Promise((c,d)=>{o.onerror=()=>{d("Failed to read file")},o.onsuccess=()=>{const l=o.result;c(l?l.content:null)}})}async writeFile(e,r){let i=P(e);if(!await this.exists(i))return Promise.reject("Cannot write file to a non-exist path:"+e);let s=await this.stat(e);const c=this.db.transaction("files","readwrite").objectStore("files");if(s){const d=c.put(new m(e,r.content,{isFile:!0},s.id));return new Promise((l,u)=>{d.onerror=()=>{console.error("Failed to write file"),u("Failed to write file")},d.onsuccess=()=>{this.commitWatch(e,r.content),l()}})}else{const d=c.add(new m(e,r.content,{isFile:!0}));return new Promise((l,u)=>{d.onerror=()=>{console.error("Failed to write file"),u("Failed to write file")},d.onsuccess=()=>{this.commitWatch(e,r.content),l()}})}}async appendFile(e,r){const t=this.db.transaction("files","readwrite").objectStore("files"),s=t.index("path"),o=IDBKeyRange.only(e),c=s.get(o);return new Promise((d,l)=>{c.onerror=()=>{console.error("Failed to read file"),l("Failed to read file")},c.onsuccess=()=>{const u=c.result;if(u){u.content+=r;const S=t.put(u);S.onerror=()=>{console.error("Failed to write file"),l("Failed to write file")},S.onsuccess=()=>{this.commitWatch(e,u.content),d()}}else console.error("File not found"),l("File not found")}})}async readdir(e){const t=this.db.transaction("files","readonly").objectStore("files").index("parentPath"),s=IDBKeyRange.only(e),o=t.getAll(s);return new Promise((c,d)=>{o.onerror=()=>{console.error("Failed to read directory"),d("Failed to read directory")},o.onsuccess=()=>{const l=o.result;c(l)}})}async exists(e){try{const t=this.db.transaction("files","readonly").objectStore("files").index("path"),s=IDBKeyRange.only(e),o=t.getAll(s);return new Promise((c,d)=>{o.onerror=()=>{console.error("Failed to read file"),d("Failed to read file")},o.onsuccess=()=>{const l=o.result;c(!!l.length)}})}catch{return!1}}async stat(e){const t=this.db.transaction("files","readonly").objectStore("files").index("path"),s=IDBKeyRange.only(e),o=t.get(s);return new Promise((c,d)=>{o.onerror=()=>{console.error("Failed to read file"),d("Failed to read file")},o.onsuccess=()=>{const l=o.result;c(l)}})}async unlink(e){const i=this.db.transaction("files","readwrite").objectStore("files"),t=i.index("path"),s=IDBKeyRange.only(e),o=t.get(s);return new Promise((c,d)=>{o.onerror=()=>{console.error("Failed to delete file"),d("Failed to delete file")},o.onsuccess=()=>{let l=o.result;l?l.isDirectory?d("Cannot delete a directory"):(i.delete(o.result.id),this.commitWatch(e,l.content),c()):d("File not found")}})}async rename(e,r){const t=this.db.transaction("files","readwrite").objectStore("files"),s=t.index("path"),o=IDBKeyRange.only(e),c=s.get(o);return new Promise((d,l)=>{c.onerror=()=>{l("Failed to read file")},c.onsuccess=()=>{const u=c.result;if(u){let S=function(A,y,b){A.isDirectory?(t.index("parentPath").openCursor(IDBKeyRange.only(A.path)).onsuccess=T=>{let w=T.target.result;if(w){let W=w.value,k=E(y,W.path.split("/").slice(-1)[0]);S(W,k,y),w.continue()}},A.path=y,A.parentPath=b,t.put(A)):(A.path=y,A.parentPath=b,t.put(A))};S(u,r,r.split("/").slice(0,-1).join("/"))}this.commitWatch(e,u.content),d()}})}async rmdir(e){const i=this.db.transaction("files","readwrite").objectStore("files"),t=i.index("path"),s=IDBKeyRange.only(e),o=t.get(s);return new Promise((c,d)=>{o.onerror=()=>{d("Failed to read file")},o.onsuccess=()=>{const l=o.result;if(l){let u=function(S){S.isDirectory&&(i.index("parentPath").openCursor(IDBKeyRange.only(S.path)).onsuccess=A=>{let y=A.target.result;if(y){let b=y.value;u(b),y.continue()}}),i.index("path").openCursor(IDBKeyRange.only(S.path)).onsuccess=A=>{let y=A.target.result;y&&(i.delete(y.value.id),y.continue())}};u(l)}this.commitWatch(e,l.content),c()}})}async mkdir(e){let r=e.split("/").slice(0,-1).join("/");if(r===""&&(r="/"),!await this.exists(r))return console.error("Cannot create directory to a non-exist path:"+r),Promise.reject("Cannot create directory to a non-exist path:"+r);if(await this.exists(e))return Promise.resolve();const c=this.db.transaction("files","readwrite").objectStore("files").add(new m(e,"",{isDirectory:!0}));return new Promise((d,l)=>{c.onerror=()=>{console.error("Failed to create directory"),l("Failed to create directory")},c.onsuccess=()=>{this.commitWatch(e,""),d()}})}}a.CHAR_BACKWARD_SLASH=92,a.CHAR_COLON=58,a.CHAR_DOT=46,a.CHAR_FORWARD_SLASH=47,a.CHAR_LOWERCASE_A=97,a.CHAR_LOWERCASE_Z=122,a.CHAR_UPPERCASE_A=65,a.CHAR_UPPERCASE_Z=90,a.WebFile=m,a.WebFileSystem=K,a.assert=O,a.assertPath=C,a.basename=I,a.dirname=P,a.extname=x,a.isPathSeparator=L,a.isPosixPathSeparator=R,a.isWindowsDeviceRoot=B,a.join=E,a.lastPathSegment=D,a.normalize=j,a.normalizeString=H,a.stripSuffix=F,a.stripTrailingSeparators=_,Object.defineProperty(a,Symbol.toStringTag,{value:"Module"})});
